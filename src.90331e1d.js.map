{"version":3,"sources":["../src/enums/Cell.ts","../src/enums/GameState.ts","../src/utils/dom.ts","../src/utils/array.ts","../src/components/board/Board.ts","../src/components/board/index.ts","../src/components/status/Status.ts","../src/components/status/index.ts","../src/components/Game.ts","../src/constants/settings.ts","../src/index.ts"],"names":[],"mappings":"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","file":"src.90331e1d.js","sourceRoot":"../public","sourcesContent":["enum Cell {\n  X = 'X',\n  O = 'O',\n  NONE = 'NONE',\n}\n\nexport default Cell;\n","enum GameState {\n  IN_PROGRESS = 'IN_PROGRESS',\n  GAME_OVER = 'GAME_OVER',\n}\n\nexport default GameState;\n","interface Options {\n  element: string;\n  className?: string;\n  innerHTML?: string;\n  appendTo?: HTMLElement;\n  onClick?: () => void;\n}\n\n/**\n * Creates a DOM Element\n */\nexport function create(options: Options): HTMLElement {\n  const element = document.createElement(options.element);\n\n  if (options.className) {\n    element.className = options.className;\n  }\n\n  if (options.onClick) {\n    element.onclick = options.onClick;\n  }\n\n  if (options.appendTo) {\n    options.appendTo.appendChild(element);\n  }\n\n  if (options.innerHTML) {\n    element.innerHTML = options.innerHTML;\n  }\n\n  return element;\n}\n","/**\n * Checks if two arrays are equal\n */\nexport function isEqual(\n  a: string[] | number[],\n  b: string[] | number[]\n): boolean {\n  if (!a || !b) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import Cell from '../../enums/Cell';\nimport GameState from '../../enums/GameState';\n\nimport * as dom from '../../utils/dom';\nimport * as array from '../../utils/array';\n\ninterface BoardOptions {\n  rows: number;\n  cols: number;\n  onGameOver: () => void;\n}\n\ninterface UpdateOptions {\n  gameState: GameState;\n}\n\nclass Board {\n  rows: number;\n  cols: number;\n  state: string[];\n  prevState: string[];\n  currentTurn = Cell.X;\n  container: HTMLElement;\n\n  onGameOver: () => void;\n\n  constructor(container: HTMLElement, options: BoardOptions) {\n    this.rows = options.rows;\n    this.cols = options.cols;\n    this.onGameOver = options.onGameOver;\n\n    this.init(container, options);\n  }\n\n  init = (container: HTMLElement, options: BoardOptions): void => {\n    this.state = this.initState(options);\n    this.container = this.createBoard(container);\n\n    this.renderBoard(this.container, this.state);\n  };\n\n  initState = (options: BoardOptions): string[] => {\n    return Array(options.rows * options.cols).fill('');\n  };\n\n  createBoard = (container: HTMLElement): HTMLElement => {\n    return dom.create({\n      element: 'div',\n      className: 'board',\n      appendTo: container,\n    });\n  };\n\n  renderBoard = (container: HTMLElement, state: string[]): void => {\n    let row = dom.create({\n      element: 'div',\n      className: 'row row-0',\n    });\n\n    for (let i = 0; i < state.length + 1; i++) {\n      dom.create({\n        element: 'div',\n        className: `cell col-${i % this.cols}`,\n        appendTo: row,\n        onClick: () => {\n          this.onCellClick(i);\n        },\n      });\n\n      if ((i + 1) % this.cols === 0) {\n        container.appendChild(row);\n        row = dom.create({\n          element: 'div',\n          className: `row row-${(i + 1) / this.rows}`,\n        });\n      }\n    }\n  };\n\n  onCellClick = (index: number): void => {\n    if (this.state[index]) {\n      return;\n    }\n\n    this.state[index] = this.currentTurn;\n\n    if (this.currentTurn === Cell.X) {\n      this.currentTurn = Cell.O;\n    } else {\n      this.currentTurn = Cell.X;\n    }\n  };\n\n  updateBoard = (state: string[]): void => {\n    const cells = this.container.getElementsByClassName('cell');\n\n    for (let i = 0; i < cells.length; i++) {\n      cells[i].innerHTML = state[i];\n    }\n\n    this.prevState = [...this.state];\n  };\n\n  rowMatch = (state: string[], i: number): boolean => {\n    let matches = 0;\n\n    if (i % this.rows !== 0) {\n      return false;\n    }\n\n    for (let j = 1; j < this.cols; j++) {\n      if (state[i] && state[i] === state[i + j]) {\n        matches++;\n      }\n    }\n\n    if (matches == this.rows - 1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  colMatch = (state: string[], i: number): boolean => {\n    let matches = 0;\n\n    if(i >= 3) { \n      return false;\n    }\n\n    for (let j = 1; j < this.cols; j++) {\n      if (state[i] && state[i] === state[i + j * this.rows]) {\n        matches++;\n      }\n    }\n\n    if (matches == this.rows - 1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  diagonalMatch = (state: string[], i: number): boolean => {\n    if (i === 0) {\n      let matches = 0;\n      for (let j = 1; j < this.cols; j++) {\n        if (state[i] && state[i] === state[4 * j]) {\n          matches++;\n        }\n      }\n      if (matches === this.rows - 1) {\n        return true;\n      }\n    }\n\n    if (i === 2) {\n      let matches = 0;\n      for (let j = 1; j < this.cols; j++) {\n        if (state[i] && state[i] === state[2 * (j + 1)]) {\n          matches++;\n        }\n      }\n      if (matches === this.rows - 1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  isFull = (state: string[]): boolean => {\n    return state.filter((s) => s).length === this.rows * this.cols;\n  };\n\n  checkWinner = (state: string[]): void => {\n    for (let i = 0; i < state.length; i++) {\n      if (\n        this.rowMatch(state, i) ||\n        this.colMatch(state, i) ||\n        this.diagonalMatch(state, i)\n      ) {\n        this.onGameOver();\n        return;\n      }\n    }\n\n    if (this.isFull(state)) {\n      this.onGameOver();\n      this.currentTurn = Cell.NONE;\n    }\n  };\n\n  update = (options: UpdateOptions): void => {\n    if (array.isEqual(this.state, this.prevState)) {\n      return;\n    }\n\n    if (options.gameState === GameState.GAME_OVER) {\n      return;\n    }\n\n    this.updateBoard(this.state);\n    this.checkWinner(this.state);\n  };\n\n  remove = (): void => {\n    this.container.remove();\n  };\n}\n\nexport default Board;\n","import './board.css';\n\nimport Board from './Board';\n\nexport default Board;\n","import Cell from '../../enums/Cell';\nimport GameState from '../../enums/GameState';\n\nimport * as dom from '../../utils/dom';\n\ninterface Options {\n  onRestart: () => void;\n}\n\ninterface UpdateOptions {\n  currentTurn: Cell;\n  gameState: GameState;\n}\n\nclass Status {\n  container: HTMLElement;\n\n  prevTurn: Cell;\n  prevGameState: GameState;\n\n  constructor(container: HTMLElement, options: Options) {\n    this.init(container, options);\n  }\n\n  init = (container: HTMLElement, options: Options): void => {\n    this.container = dom.create({\n      element: 'div',\n      className: 'status',\n      appendTo: container,\n      innerHTML: `\n        <div class=\"game-over hidden\">\n          <div class=\"title\">Congratulations!</div>\n          <div class=\"sub-title\">Player wins</div>\n          <button class=\"restart\">Play Again!</button>\n        </div>\n        <div class=\"turns\">\n          <div class=\"players\">\n            <div class=\"player\"> \n              P1 (X)\n            </div>\n            <div class=\"player\">\n              P2 (O)\n            </div>\n          </div>\n        </div>\n      `,\n    });\n\n    const button = document.getElementsByClassName('restart');\n    button[0].addEventListener('click', options.onRestart);\n  };\n\n  updateTurn = (turn: Cell): void => {\n    const players = this.container.getElementsByClassName('player');\n\n    if (turn === Cell.X) {\n      players[0].className = 'player active';\n      players[1].className = 'player';\n    }\n\n    if (turn === Cell.O) {\n      players[0].className = 'player';\n      players[1].className = 'player active';\n    }\n\n    this.prevTurn = turn;\n  };\n\n  onGameOver = (winner: string): void => {\n    const gameOverContainer = this.container.getElementsByClassName(\n      'game-over'\n    );\n    const message = gameOverContainer[0].getElementsByClassName('sub-title');\n\n    if (winner) {\n      const player = winner === Cell.X ? '1' : '2';\n      message[0].innerHTML = `Player ${player} (${winner}) wins!`;\n    } else {\n      const titleContainer = gameOverContainer[0].getElementsByClassName(\n        'title'\n      );\n\n      titleContainer[0].innerHTML = 'Game Over';\n      message[0].innerHTML = \"It's a tie!\";\n    }\n\n    gameOverContainer[0].className = 'game-over';\n  };\n\n  update = (options: UpdateOptions): void => {\n    if (options.currentTurn === this.prevTurn) {\n      return;\n    }\n\n    if (options.gameState === GameState.GAME_OVER) {\n      if (this.prevGameState === options.gameState) {\n        return;\n      }\n\n      const winner = options.currentTurn === Cell.NONE ? '' : this.prevTurn;\n      this.onGameOver(winner);\n\n      this.prevGameState = options.gameState;\n      return;\n    }\n\n    this.updateTurn(options.currentTurn);\n  };\n\n  remove = (): void => {\n    this.container.remove();\n  };\n}\n\nexport default Status;\n","import './status.css';\n\nimport Status from './Status';\n\nexport default Status;\n","import Board from './board';\nimport Status from './status';\n\nimport * as dom from '../utils/dom';\n\nimport GameState from '../enums/GameState';\n\nclass Game {\n  board: Board;\n  status: Status;\n  container: HTMLElement;\n  gameState = GameState.IN_PROGRESS;\n\n  constructor(container: HTMLElement) {\n    this.init(container);\n  }\n\n  init = (container: HTMLElement): void => {\n    this.container = dom.create({\n      element: 'div',\n      className: 'container',\n      appendTo: container,\n    });\n\n    this.start();\n  };\n\n  start = (): void => {\n    this.status = new Status(this.container, {\n      onRestart: this.restart,\n    });\n    this.board = new Board(this.container, {\n      rows: 3,\n      cols: 3,\n      onGameOver: () => this.updateGameState(GameState.GAME_OVER),\n    });\n  };\n\n  updateGameState = (gameState: GameState): void => {\n    this.gameState = gameState;\n  };\n\n  restart = (): void => {\n    this.board.remove();\n    this.status.remove();\n\n    this.start();\n    this.gameState = GameState.IN_PROGRESS;\n  };\n\n  // Main Game Loop\n  loop = (): void => {\n    this.board.update({\n      gameState: this.gameState,\n    });\n\n    this.status.update({\n      gameState: this.gameState,\n      currentTurn: this.board.currentTurn,\n    });\n  };\n}\n\nexport default Game;\n","// 60fps\nexport const TICK_RATE = 1000 / 60;\n","import './index.css';\n\nimport Game from './components/Game';\n\nimport * as settings from './constants/settings';\n\nfunction init(): void {\n  let nextFrame = Date.now();\n\n  const container = document.getElementById('root');\n  const game = new Game(container);\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (nextFrame < now) {\n      game.loop();\n\n      nextFrame = now + settings.TICK_RATE;\n    }\n\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  requestAnimationFrame(nextAnimationFrame);\n}\n\ninit();\n"]}